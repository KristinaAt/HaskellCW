WARNING: DO NOT MODIFY THIS FILE IN ANY WAY

\begin{code}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE FlexibleInstances #-}
module Submission where

import qualified Data.Map as M
import Data.Map (Map)
import Data.Array

data Player = Player1 | Player2

data Planet = Planet Owner Ships Growth

newtype Ships = Ships Int

newtype Growth = Growth Int

data Owner = Neutral | Owned Player

newtype PlanetId = PlanetId Int

type Planets = Map PlanetId Planet

data Wormhole = Wormhole Source Target Turns

newtype Source = Source PlanetId

newtype Target = Target PlanetId

newtype Turns  = Turns Int

newtype WormholeId = WormholeId Int

type Wormholes = Map WormholeId Wormhole

data Fleet = Fleet Player Ships WormholeId Turns

type Fleets = [Fleet]

data GameState = GameState Planets Wormholes Fleets

data Order = Order WormholeId Ships

tabulate :: Ix i => (i,i) -> (i -> a) -> Array i a

example1 :: GameState

targetPlanets :: GameState -> Source -> [(PlanetId, Ships, Growth)]

shipsOnPlanet :: GameState -> PlanetId -> Ships

lookupPlanet :: PlanetId -> GameState -> Planet

wormholesFrom :: Source -> GameState -> Wormholes

wormholesTo :: Target -> GameState -> Wormholes

knapsack :: (Ord weight, Num weight, Ord value, Num value) => 
  [(name, weight, value)] -> weight -> value

maximum :: Ord a => a -> [a] -> a

knapsack' :: forall name weight value .
  (Ix weight, Num weight, Ord value, Num value) => 
  [(name, weight, value)] -> weight -> value

knapsack''
  :: forall name weight value
  . (Ix weight, Num weight, Ord value, Num value)
  => [(name, weight, value)] -> weight -> (value, [name])

bknapsack
  :: (Ord weight, Num weight, Ord value, Num value)
  => [(name, weight, value)] -> weight -> (value, [name])

bknapsack' :: forall name weight value . 
  (Ord weight, Num weight, Ord value, Num value) =>
  [(name, weight, value)] -> Int -> 
  weight -> (value, [name])

bknapsack'' :: forall name weight value .
  (Ord name, Ix weight, Ord weight, Num weight, 
    Ord value, Num value) =>
  [(name, weight, value)] -> weight -> (value, [name])

optimise :: GameState -> Source -> (Growth, [PlanetId])

type Weight = Integer

class Eq v => Edge e v | e -> v where
  source :: e -> v
  target :: e -> v
  weight :: e -> Weight

data Path e = Path Weight [e]

pathFromEdge :: Edge e v => e -> Path e

extend :: Edge e v => Path e -> e -> Path e

pathFromEdges :: Edge e v => [e] -> Path e

class Edge e v => Graph g e v | g -> e where
  vertices  :: g -> [v]
  edges     :: g -> [e]
  edgesFrom :: g -> v -> [e]
  edgesTo   :: g -> v -> [e]
  velem     :: v -> g -> Bool
  eelem     :: e -> g -> Bool

example2 :: [(String, String, Integer)]

lte :: (a -> a -> Ordering) -> (a -> a -> Bool)

eq :: (a -> a -> Ordering) -> (a -> a -> Bool)

class PQueue pqueue where
  toPQueue   :: (a -> a -> Ordering) -> [a] -> pqueue a
  fromPQueue :: pqueue a -> [a]
  priority   :: pqueue a -> (a -> a -> Ordering)
  empty      :: (a -> a -> Ordering) -> pqueue a
  isEmpty    :: pqueue a -> Bool
  insert     :: a -> pqueue a -> pqueue a
  delete     :: a -> pqueue a -> pqueue a
  extract    :: pqueue a -> a
  discard    :: pqueue a -> pqueue a
  detach     :: pqueue a -> (a, pqueue a)

data PList a = PList (a -> a -> Ordering) [a]

cmpPath :: Path v -> Path v -> Ordering

shortestPaths :: forall g e v. Graph g e v => g -> v -> [Path e]

example3 :: GameState

dijkstra :: (Graph g e v, PQueue pqueue) => g -> [v] -> pqueue (Path e) -> [Path e]

data Heap a = Heap (a -> a -> Ordering) (Tree a)

data Tree a = Nil | Node Int (Tree a) a (Tree a)

shortestPaths' :: forall g e v . Graph g e v => g -> v -> [Path e]

instance PQueue Heap
newtype AdjList e v = AdjList [(v, [e])]

conflictZones :: GameState -> PlanetId -> PlanetId
  -> ([PlanetId], [PlanetId], [PlanetId])

instance (Eq e, Edge e v) => Graph (AdjList e v) e v
\end{code}
